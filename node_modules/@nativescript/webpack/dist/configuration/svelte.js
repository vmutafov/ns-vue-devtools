"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const project_1 = require("../helpers/project");
const platform_1 = require("../helpers/platform");
const index_1 = require("../index");
const log_1 = require("../helpers/log");
const base_1 = __importDefault(require("./base"));
function default_1(config, env = index_1.env) {
    base_1.default(config, env);
    const platform = platform_1.getPlatformName();
    const mode = env.production ? 'production' : 'development';
    const production = mode === 'production';
    // resolve .svelte files
    // the order is reversed because we are using prepend!
    config.resolve.extensions.prepend('.svelte').prepend(`.${platform}.svelte`);
    // add a rule for .svelte files
    config.module
        .rule('svelte')
        .test(/\.svelte$/)
        .exclude.add(/node_modules/)
        .end()
        .use('svelte-loader-hot')
        .loader('svelte-loader-hot')
        .tap((options) => {
        return Object.assign(Object.assign({}, options), { dev: !production, preprocess: getSvelteConfigPreprocessor(), hotReload: !production, hotOptions: {
                injectCss: false,
                native: true,
            }, 
            // Suppress A11y warnings
            onwarn(warning, warn) {
                if (!/A11y:/.test(warning.message)) {
                    warn(warning);
                }
            } });
    });
    return config;
}
exports.default = default_1;
function getSvelteConfigPreprocessor() {
    const config = getSvelteConfig();
    return config === null || config === void 0 ? void 0 : config.preprocess;
}
function getSvelteConfig() {
    try {
        return require(project_1.getProjectFilePath('svelte.config.js'));
    }
    catch (err) {
        log_1.error('Could not find svelte.config.js.', err);
    }
}
//# sourceMappingURL=svelte.js.map